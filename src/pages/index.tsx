/* eslint-disable @typescript-eslint/no-unsafe-call */
import Head from "next/head";
import { SignInButton, UserButton, useUser} from "@clerk/nextjs";
import { api } from "~/utils/api"
import { useState } from "react";
import { toast } from "react-hot-toast";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
dayjs.extend(relativeTime);
import { PostView } from "~/components/postview";
/* import Link from "next/link"; */
/* import { LoadingPage } from "~/components/loading"; */
/* import { type Post } from "@prisma/client"; */
/* import Image from "next/image"; */



export default function Home() {
  // const hello = api.post.hello.useQuery({ text: "from tRPC" });
  const { data } = api.post.getAll.useQuery();
  const { user } = useUser();
  const [input, setInput] = useState("");
 /* 
  if (postsLoading)
    return (
      <div className="flex grow">
        <LoadingPage />
      </div>
    );

  if (!data) return <div>Something went wrong</div>;
 */
  const ctx = api.useContext();

  const { mutate } = api.post.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.post.getAll.invalidate();  // invalidate the cache, the "void" is to ignore the promise which is returned and get conpmlain from typescript
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors?.content;
      if (errorMessage?.[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error("Failed to post! Please try again later.");
      }
    },
  });

  if (!user) return null;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#09090b] to-[#27272a]">
        <div className="w-full h-screen md:w-1/3 border-x-[1px] border-slate-600 py-10">
            { !user&& <SignInButton>  
            <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
              Sign in
            </button>
          </SignInButton>}
          { user &&  
              <div className="border-b-[1px] border-slate-600 flex gap-4">
              <UserButton appearance={{
                elements: {
                  userButtonAvatarBox: {
                    width: 70,
                    height: 70,
                    marginBottom: 20,
                    marginLeft: 20,
                  }
                }
              }} />
               <input
        placeholder="Type somgthing here!"
        className="grow bg-transparent outline-none text-white placeholder-slate-600"
        type="text"
        value={input}
        autoFocus
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            if (input !== "") {
              mutate({ content: input });
            }
          }
        }} 
       /*  disabled={isPosting} */
      /> 
        <button
        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded h-10 m-6"
        onClick={() => {
          if (input !== "") {
            mutate({ content: input });
          }
        }}
      >
       Post
      </button>
          </div>
          
          } 
          {/* {!user && 
            <SignIn path="/sign-in" routing="path" >
              >
                Sign in
        
            </SignIn>} */}
              <div className="m-6">
                {data?.map(({post, author}) => {
                  return (
                    <PostView post={post} author={author} key={post.id} />
                   /*  <div key={post.id} className="text-white border-b-[1px] border-slate-600 py-4">              
                      {post.content} 
                      <p className="text-sm text-slate-500">{`${dayjs(post.createdAt).fromNow()}`} from 
                        <Link href={`/${author.username}`}>
                            <span className="italic hover:text-slate-400"> {author?.username}</span>
                        </Link>      
                      </p>
                    </div> */
                  );
                })}
              </div>
            </div>      
     </main>
    </>
  )
    }